<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	<!-- 
		通过属性注入配置bean属性 
		class：通过反射方式创建实例
		id:标识容器中的bean
	 -->
	<bean id="helloWorld" class="com.beater.spring.beans.HelloWorld">
		<property name="name" value="Spring"></property>
	</bean>
	<!-- 通过构造器注入配置bean属性 ,需先为bean写带参构造方法-->
	<bean id="helloWorld2" class="com.beater.spring.beans.HelloWorld">
		<constructor-arg name="name" index="0" type="java.lang.String">
			<value><![CDATA[<beater>]]></value>
		</constructor-arg>
	</bean>
	<!-- 通过属性注入配置bean属性，基于getter/setter -->
	<bean id="car" class="com.beater.spring.beans.Car">
		<property name="carName" value="benz"></property>
		<property name="price" value="3000000"></property>
		<property name="speed" value="200"></property>
	</bean>
	<bean id="car2" class="com.beater.spring.beans.Car">
		<property name="carName" value="bmw"></property>
		<property name="price" value="2000000"></property>
		<property name="speed" value="250"></property>
	</bean>
	<bean id="car3" class="com.beater.spring.beans.Car">
		<property name="carName" value="ford"></property>
		<property name="price" value="100000"></property>
		<property name="speed" value="150"></property>
	</bean>
	<!-- 关联对象并为级联对象赋值 -->
	<bean id="person" class="com.beater.spring.beans.Person">
		<property name="name" value="beater"></property>
		<property name="car" ref="car"></property>
		<property name="car.price" value="2000000"></property>
	</bean>
	<!-- 内部bean -->
	<bean id="person2" class="com.beater.spring.beans.Person">
		<property name="car">
			<bean class="com.beater.spring.beans.Car">
				<property name="carName" value="benz"></property>
				<property name="price" value="3000000"></property>
				<property name="speed" value="200"></property>
			</bean>
		</property>
	</bean>
	<!-- null的专有标志<null/> -->
	<bean id="person3" class="com.beater.spring.beans.Person">
		<property name="name" value="beater"></property>
		<property name="car"><null></null></property>
	</bean>
	<!-- 配置集合属性 -->
	<bean id="person4" class="com.beater.spring.beans.Collection.Person">
		<property name="name" value="carlist"></property>
		<property name="cars">
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
				<ref bean="car3"/>
			</list>
		</property>
	</bean>
	<!-- 配置Map属性 -->
	<bean id="person5" class="com.beater.spring.beans.Collection.CarMapPerson">
		<property name="name" value="carMap"></property>
		<property name="cars">
			<map>
				<entry key="car1" value-ref="car"></entry>
				<entry key="car2" value-ref="car2"></entry>
				<entry key="car3" value-ref="car3"></entry>
			</map>
		</property>
	</bean>
	<!-- 配置独立的集合bean，以供多个bean进行引用，需要导入util命名空间 -->\
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	<util:map id="carMap">
		<entry key="car1" value-ref="car"></entry>
	</util:map>
	<util:properties id="properties">
		<prop key="user">root</prop>
		<prop key="password">admin</prop>
	</util:properties>
	<bean id="person6" class="com.beater.spring.beans.Collection.Person">
		<property name="name" value="carlist"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	<!-- 通过p命名空间为bean属性赋值，需要先导入p命名空间 -->
	<bean id="person7" class="com.beater.spring.beans.Collection.Person"
		p:name="Rose" p:cars-ref="cars"
		></bean>
	<!-- 配置properties属性值 -->
	<bean id="dataSource" class="com.beater.spring.beans.Collection.DataSource">
		<property name="properties">
			<props>
				<prop key="user">username</prop>
				<prop key="password">password</prop>
				<prop key="jdbcUrl">jdbc:db:///dbname</prop>
				<prop key="driverClass">com.db.jdbc.Driver</prop>
			</props>
		</property>			
	</bean>
</beans>
